#pragma checksum "C:\Users\liute\Source\Repos\Minedrink\UWPShopManagement\UWPShopManagement\Views\V_Shell.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "4DA7C019B8D27AEC198917941E64C54D"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UWPShopManagement.Views
{
    partial class V_Shell : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        private static class XamlBindingSetters
        {
            public static void Set_Microsoft_Toolkit_Uwp_UI_Controls_HamburgerMenu_DisplayMode(global::Microsoft.Toolkit.Uwp.UI.Controls.HamburgerMenu obj, global::Windows.UI.Xaml.Controls.SplitViewDisplayMode value)
            {
                obj.DisplayMode = value;
            }
            public static void Set_Microsoft_Toolkit_Uwp_UI_Controls_HamburgerMenu_IsPaneOpen(global::Microsoft.Toolkit.Uwp.UI.Controls.HamburgerMenu obj, global::System.Boolean value)
            {
                obj.IsPaneOpen = value;
            }
            public static void Set_Microsoft_Toolkit_Uwp_UI_Controls_HamburgerMenu_ItemsSource(global::Microsoft.Toolkit.Uwp.UI.Controls.HamburgerMenu obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Microsoft_Toolkit_Uwp_UI_Controls_HamburgerMenu_OptionsItemsSource(global::Microsoft.Toolkit.Uwp.UI.Controls.HamburgerMenu obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.OptionsItemsSource = value;
            }
            public static void Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Viewbox_Child(global::Windows.UI.Xaml.Controls.Viewbox obj, global::Windows.UI.Xaml.UIElement value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.UIElement) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.UIElement), targetNullValue);
                }
                obj.Child = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Foreground(global::Windows.UI.Xaml.Controls.TextBlock obj, global::Windows.UI.Xaml.Media.Brush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.Brush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.Brush), targetNullValue);
                }
                obj.Foreground = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        private class V_Shell_obj2_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IV_Shell_Bindings
        {
            private global::UWPShopManagement.ViewModels.ShellNavigationItem dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Shapes.Rectangle obj3;
            private global::Windows.UI.Xaml.Controls.Viewbox obj4;
            private global::Windows.UI.Xaml.Controls.TextBlock obj5;

            private V_Shell_obj2_BindingsTracking bindingsTracking;

            public V_Shell_obj2_Bindings()
            {
                this.bindingsTracking = new V_Shell_obj2_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 3: // Views\V_Shell.xaml line 19
                        this.obj3 = (global::Windows.UI.Xaml.Shapes.Rectangle)target;
                        break;
                    case 4: // Views\V_Shell.xaml line 26
                        this.obj4 = (global::Windows.UI.Xaml.Controls.Viewbox)target;
                        break;
                    case 5: // Views\V_Shell.xaml line 30
                        this.obj5 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                switch(args.Phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(args.Item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            ((global::Windows.UI.Xaml.Controls.Grid)args.ItemContainer.ContentTemplateRoot).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::UWPShopManagement.ViewModels.ShellNavigationItem) args.Item, 1 << (int)args.Phase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IV_Shell_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::UWPShopManagement.ViewModels.ShellNavigationItem)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::UWPShopManagement.ViewModels.ShellNavigationItem obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_SelectedVis(obj.SelectedVis, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Icon(obj.Icon, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_SelectedForeground(obj.SelectedForeground, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Label(obj.Label, phase);
                    }
                }
            }
            private void Update_SelectedVis(global::Windows.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\V_Shell.xaml line 19
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj3, obj);
                }
            }
            private void Update_Icon(global::Windows.UI.Xaml.Controls.IconElement obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\V_Shell.xaml line 26
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Viewbox_Child(this.obj4, obj, null);
                }
            }
            private void Update_SelectedForeground(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\V_Shell.xaml line 30
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Foreground(this.obj5, obj, null);
                }
            }
            private void Update_Label(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\V_Shell.xaml line 30
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj5, obj, null);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
            private class V_Shell_obj2_BindingsTracking
            {
                private global::System.WeakReference<V_Shell_obj2_Bindings> weakRefToBindingObj; 

                public V_Shell_obj2_BindingsTracking(V_Shell_obj2_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<V_Shell_obj2_Bindings>(obj);
                }

                public V_Shell_obj2_Bindings TryGetBindingObject()
                {
                    V_Shell_obj2_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    V_Shell_obj2_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::UWPShopManagement.ViewModels.ShellNavigationItem obj = sender as global::UWPShopManagement.ViewModels.ShellNavigationItem;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_SelectedVis(obj.SelectedVis, DATA_CHANGED);
                                bindings.Update_SelectedForeground(obj.SelectedForeground, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "SelectedVis":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SelectedVis(obj.SelectedVis, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedForeground":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SelectedForeground(obj.SelectedForeground, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::UWPShopManagement.ViewModels.ShellNavigationItem obj)
                {
                    V_Shell_obj2_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        private class V_Shell_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IV_Shell_Bindings
        {
            private global::UWPShopManagement.Views.V_Shell dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Microsoft.Toolkit.Uwp.UI.Controls.HamburgerMenu obj6;
            private global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj7;
            private global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj8;
            private global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj11;

            private V_Shell_obj1_BindingsTracking bindingsTracking;

            public V_Shell_obj1_Bindings()
            {
                this.bindingsTracking = new V_Shell_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 6: // Views\V_Shell.xaml line 95
                        this.obj6 = (global::Microsoft.Toolkit.Uwp.UI.Controls.HamburgerMenu)target;
                        (this.obj6).RegisterPropertyChangedCallback(global::Microsoft.Toolkit.Uwp.UI.Controls.HamburgerMenu.IsPaneOpenProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.IsPaneOpen = this.obj6.IsPaneOpen;
                            }
                        });
                        break;
                    case 7: // Views\V_Shell.xaml line 111
                        this.obj7 = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)target;
                        break;
                    case 8: // Views\V_Shell.xaml line 108
                        this.obj8 = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)target;
                        break;
                    case 11: // Views\V_Shell.xaml line 121
                        this.obj11 = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)target;
                        break;
                    default:
                        break;
                }
            }

            // IV_Shell_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::UWPShopManagement.Views.V_Shell)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::UWPShopManagement.Views.V_Shell obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                }
            }
            private void Update_ViewModel(global::UWPShopManagement.ViewModels.VM_Shell obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_DisplayMode(obj.DisplayMode, phase);
                        this.Update_ViewModel_IsPaneOpen(obj.IsPaneOpen, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_PrimaryItems(obj.PrimaryItems, phase);
                        this.Update_ViewModel_SecondaryItems(obj.SecondaryItems, phase);
                        this.Update_ViewModel_ItemSelectedCommand(obj.ItemSelectedCommand, phase);
                        this.Update_ViewModel_StateChangedCommand(obj.StateChangedCommand, phase);
                    }
                }
            }
            private void Update_ViewModel_DisplayMode(global::Windows.UI.Xaml.Controls.SplitViewDisplayMode obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\V_Shell.xaml line 95
                    XamlBindingSetters.Set_Microsoft_Toolkit_Uwp_UI_Controls_HamburgerMenu_DisplayMode(this.obj6, obj);
                }
            }
            private void Update_ViewModel_IsPaneOpen(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\V_Shell.xaml line 95
                    XamlBindingSetters.Set_Microsoft_Toolkit_Uwp_UI_Controls_HamburgerMenu_IsPaneOpen(this.obj6, obj);
                }
            }
            private void Update_ViewModel_PrimaryItems(global::System.Collections.ObjectModel.ObservableCollection<global::UWPShopManagement.ViewModels.ShellNavigationItem> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\V_Shell.xaml line 95
                    XamlBindingSetters.Set_Microsoft_Toolkit_Uwp_UI_Controls_HamburgerMenu_ItemsSource(this.obj6, obj, null);
                }
            }
            private void Update_ViewModel_SecondaryItems(global::System.Collections.ObjectModel.ObservableCollection<global::UWPShopManagement.ViewModels.ShellNavigationItem> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\V_Shell.xaml line 95
                    XamlBindingSetters.Set_Microsoft_Toolkit_Uwp_UI_Controls_HamburgerMenu_OptionsItemsSource(this.obj6, obj, null);
                }
            }
            private void Update_ViewModel_ItemSelectedCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\V_Shell.xaml line 111
                    XamlBindingSetters.Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(this.obj7, obj, null);
                    // Views\V_Shell.xaml line 108
                    XamlBindingSetters.Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(this.obj8, obj, null);
                }
            }
            private void Update_ViewModel_StateChangedCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\V_Shell.xaml line 121
                    XamlBindingSetters.Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(this.obj11, obj, null);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
            private class V_Shell_obj1_BindingsTracking
            {
                private global::System.WeakReference<V_Shell_obj1_Bindings> weakRefToBindingObj; 

                public V_Shell_obj1_BindingsTracking(V_Shell_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<V_Shell_obj1_Bindings>(obj);
                }

                public V_Shell_obj1_Bindings TryGetBindingObject()
                {
                    V_Shell_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ViewModel(null);
                }

                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    V_Shell_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::UWPShopManagement.ViewModels.VM_Shell obj = sender as global::UWPShopManagement.ViewModels.VM_Shell;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_DisplayMode(obj.DisplayMode, DATA_CHANGED);
                                bindings.Update_ViewModel_IsPaneOpen(obj.IsPaneOpen, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "DisplayMode":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_DisplayMode(obj.DisplayMode, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsPaneOpen":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_IsPaneOpen(obj.IsPaneOpen, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::UWPShopManagement.ViewModels.VM_Shell cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::UWPShopManagement.ViewModels.VM_Shell obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 6: // Views\V_Shell.xaml line 95
                {
                    this.NavigationMenu = (global::Microsoft.Toolkit.Uwp.UI.Controls.HamburgerMenu)(target);
                }
                break;
            case 9: // Views\V_Shell.xaml line 115
                {
                    this.shellFrame = (global::Windows.UI.Xaml.Controls.Frame)(target);
                }
                break;
            case 10: // Views\V_Shell.xaml line 118
                {
                    this.WindowStates = (global::Windows.UI.Xaml.VisualStateGroup)(target);
                }
                break;
            case 12: // Views\V_Shell.xaml line 124
                {
                    this.PanoramicState = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 13: // Views\V_Shell.xaml line 129
                {
                    this.WideState = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 14: // Views\V_Shell.xaml line 134
                {
                    this.NarrowState = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\V_Shell.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    V_Shell_obj1_Bindings bindings = new V_Shell_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            case 2: // Views\V_Shell.xaml line 14
                {                    
                    global::Windows.UI.Xaml.Controls.Grid element2 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    V_Shell_obj2_Bindings bindings = new V_Shell_obj2_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element2.DataContext);
                    element2.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element2, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

